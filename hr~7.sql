/* Formatted on 17/7/2022 11:39:38 a. m. (QP5 v5.256.13226.35538) */
SELECT * FROM CUSTOMERS
/

ALTER TABLE OPE_IND.CUSTOMERS
   ADD salario NUMBER
/

DESC pr_ejecucion_principal
/

CREATE TABLE tb_log
(
   ID                     NUMBER
                             GENERATED BY DEFAULT ON NULL AS IDENTITY
                                             START WITH 1 INCREMENT BY 1, --v 12
   fecha_error            DATE DEFAULT SYSDATE,
   nombre_procedimiento   VARCHAR2 (100) NOT NULL,
   bloque_procedimiento   VARCHAR2 (10) NOT NULL,
   codigo_error           NUMBER NOT NULL,
   mensaje_error          VARCHAR2 (300) NOT NULL,
   valores_ejecucion      VARCHAR2 (2000)
);
/

CREATE INDEX OPE_IND.IDX_CUSTOMER_ID
   ON OPE_IND.CUSTOMERS (CUSTOMER_ID)
   LOGGING
   TABLESPACE TB_SAC_IND
   STORAGE (BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
   NOPARALLEL;
/

CREATE OR REPLACE PROCEDURE PR_EJECUCION_PRINCIPAL (
   pni_codigo_cliente     IN     NUMBER,
   pvi_nombre             IN     VARCHAR2,
   pdi_fecha_nacimiento   IN     DATE DEFAULT '01-ENE-1981',
   pni_salario            IN     NUMBER,
   pvi_departamento       IN     VARCHAR2,
   pvo_resultado             OUT VARCHAR)
IS
   --variables

   v_resultado      NUMBER;
   v_texto          VARCHAR2 (255);

   ---- variables de control
   v_anio           NUMBER;
   v_departamento   VARCHAR2 (250);
   v_salario        NUMBER;
-- inicio bloque principal


BEGIN
   -- inicio de analisis de datos

   --paso 1
   v_departamento := TRIM (UPPER (pvi_departamento));            --  'MASAYA '
   v_anio := TO_CHAR (pdi_fecha_nacimiento, 'YYYY');

   IF v_anio = 1990 AND v_departamento = 'MASAYA'
   THEN
      v_salario := pni_salario + (pni_salario * 0.2);
   ELSE
      -- no hay cambio, entonces mantengo el valor inicial
      v_salario := pni_salario;
   END IF;



   BEGIN                                                            --BLOQUE 1
      INSERT INTO OPE_IND.CUSTOMERS (customer_id,
                                     CUSTOMER_NAME,
                                     city,
                                     fecha_nacimiento,
                                     salario)
           VALUES (pni_codigo_cliente,
                   pvi_nombre,
                   v_departamento,
                   pdi_fecha_nacimiento,
                   v_salario);

      v_resultado := 1;
   EXCEPTION
      WHEN OTHERS
      THEN                                               --- todos los errores
         v_resultado := SQLCODE;
         V_TEXTO := SQLERRM;

         SP_INSERTLOG (
            P_NOMBRE_PROCEDIMIENTO   => 'PR_EJECUCION_PRINCIPAL',
            P_BLOQUE_PROCEDIMIENTO   => 'BLOQUE 1',
            P_MENSAJE_EROR           => V_TEXTO,
            P_CODIGO_ERROR           => v_resultado,
            P_VALORES_EJECUCION      =>    'PR_EJECUCION_PRINCIPAL'
                                        || pni_codigo_cliente
                                        || '|'
                                        || pvi_nombre
                                        || '|'
                                        || pdi_fecha_nacimiento
                                        || '|'
                                        || pni_salario);
   END;                                                                --exito



   COMMIT;

   IF v_resultado = 1
   THEN
      pvo_resultado := 'OK';
   ELSE
      pvo_resultado := 'Resultado: ' || v_resultado || '-' || V_TEXTO;
   END IF;
-- fin del procedimiento
END pr_ejecucion_principal;
/

DECLARE
   vs_resultado   VARCHAR2 (300);
BEGIN
   pr_ejecucion_principal (PNI_CODIGO_CLIENTE     => 15,
                           PVI_NOMBRE             => 'Ricardo',
                           PDI_FECHA_NACIMIENTO   => NULL,
                           pni_salario            => 1100,
                           pvi_departamento       => 'granada',
                           PvO_RESULTADO          => vs_resultado);


   DBMS_OUTPUT.PUT_LINE (vs_resultado);
END;
/

CREATE OR REPLACE PROCEDURE SP_INSERTLOG (
   p_nombre_procedimiento   IN tb_log.nombre_procedimiento%TYPE,
   p_bloque_procedimiento   IN tb_log.bloque_procedimiento%TYPE,
   p_mensaje_eror           IN tb_log.mensaje_error%TYPE,
   p_codigo_error           IN tb_log.codigo_error%TYPE,
   p_valores_ejecucion      IN tb_log.valores_ejecucion%TYPE)
IS
BEGIN
   INSERT INTO tb_log (nombre_procedimiento,
                       bloque_procedimiento,
                       MENSAJE_ERrOR,
                       codigo_error,
                       valores_ejecucion)
        VALUES (UPPER (P_nombre_procedimiento),
                P_bloque_procedimiento,
                P_MENSAJE_EROR,
                P_codigo_error,
                P_valores_ejecucion);

   COMMIT;
-- NULL;
END SP_INSERTLOG;
/

SELECT * FROM tb_log
/

DECLARE
   vs_resultado   VARCHAR2 (300);
   v_codigo       customers.CUSTOMER_ID%TYPE;
BEGIN
   --SELECT MAX (CUSTOMER_ID) + 1 INTO v_codigo FROM customers;

   v_codigo := sq_customer_id.NEXTVAL;

   pr_ejecucion_principal (PNI_CODIGO_CLIENTE   => v_codigo,
                           PVI_NOMBRE           => :nombre,
                           pni_salario          => :salario,
                           pvi_departamento     => :departamento,
                           PvO_RESULTADO        => vs_resultado);


   DBMS_OUTPUT.PUT_LINE (vs_resultado);
END;
/

DROP SEQUENCE sq_customer_id
/

CREATE SEQUENCE sq_customer_id MINVALUE 1
                               MAXVALUE 999999999
                               START WITH 18
                               INCREMENT BY 1;
/

SELECT sq_customer_id.LAST_NUMBER FROM DUAL
/

SELECT *
  FROM USER_SEQUENCES
 WHERE SEQUENCE_NAME = 'SQ_CUSTOMER_ID';